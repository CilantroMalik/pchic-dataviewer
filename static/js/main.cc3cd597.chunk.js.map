{"version":3,"sources":["features/assetChooser/assetSlice.js","features/infoModal/infoSlice.js","features/assetChooser/AssetChooser.js","features/plotViewer/PlotViewer.js","App.js","app/store.js","index.js"],"names":["assetSlice","createSlice","name","initialState","reducers","setCellType1","state","action","cellType1","payload","setCellType2","cellType2","setAssetType","assetType","setGene","gene","actions","infoSlice","setVisible","visible","AssetChooser","options","useSelector","assets","info","useState","typesSelected","setTypesSelected","geneSelected","setGeneSelected","selecting","setSelecting","dimmed","setDimmed","dispatch","useDispatch","cellButtons","map","cellType","disabled","className","onClick","includes","temp","push","length","onCellTypeClicked","style","margin","padding","nanoid","plotButtons","plotType","onPlotTypeClicked","width","marginTop","marginLeft","borderColor","backgroundColor","marginRight","opacity","color","flexBasis","placeholder","type","onChange","e","target","value","PlotViewer","filename","class","borderRadius","src","alt","App","explanation","transition","filter","position","top","left","textAlign","marginBottom","store","configureStore","reducer","assetReducer","infoReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAIMA,EAAaC,YAAY,CAC3BC,KAAM,SACNC,aAJiB,CAAC,UAAa,OAAQ,UAAa,QAAS,UAAa,gBAAiB,KAAQ,QAKnGC,SAAU,CACNC,aADM,SACOC,EAAOC,GAAUD,EAAME,UAAYD,EAAOE,SACvDC,aAFM,SAEOJ,EAAOC,GAAUD,EAAMK,UAAYJ,EAAOE,SACvDG,aAHM,SAGON,EAAOC,GAAUD,EAAMO,UAAYN,EAAOE,SACvDK,QAJM,SAIER,EAAOC,GAAUD,EAAMS,KAAOR,EAAOE,Y,EAIgBT,EAAWgB,QAAjEX,E,EAAAA,aAAcK,E,EAAAA,aAAcE,E,EAAAA,aAAcE,E,EAAAA,QAE1Cd,IAAf,QCbMiB,EAAYhB,YAAY,CAC1BC,KAAM,OACNC,aAJiB,CAAC,SAAW,GAK7BC,SAAU,CACNc,WADM,SACKZ,EAAOC,GAAUD,EAAMa,QAAUZ,EAAOE,YAI5CS,EAAeD,EAAUD,QAAzBE,WAEAD,IAAf,Q,OCPaG,EAAe,WACxB,IAAMC,EAAUC,aAAY,SAAAhB,GAAK,OAAIA,EAAMiB,UADb,GAEjBD,aAAY,SAAAhB,GAAK,OAAIA,EAAMkB,KAAKL,WACHM,mBAAS,KAHrB,mBAGvBC,EAHuB,KAGRC,EAHQ,OAIUF,mBAAS,QAJnB,mBAIvBG,EAJuB,KAITC,EAJS,OAKIJ,oBAAS,GALb,mBAKvBK,EALuB,KAKZC,EALY,OAMFN,oBAAS,GANP,mBAMvBO,EANuB,KAMfC,EANe,KAOxBC,EAAWC,cAiCXC,EA/BY,CAAC,OAAQ,KAAM,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,KAAM,MAAO,QAAS,KAAM,OAAQ,OAAQ,MAAO,KAAM,QA+BnGC,KAAI,SAAAC,GAAQ,OACtC,wBAAQC,UAAWT,EAAWU,UAAYnB,EAAQb,YAAc8B,GAAYjB,EAAQV,YAAc2B,EAAY,SAAW,eAClGG,QAAS,kBA/BV,SAACH,GACvB,IAAKZ,EAAcgB,SAASJ,GAAW,CACnC,IAAMK,EAAOjB,EACbiB,EAAKC,KAAKN,GACVX,EAAiBgB,GAEQ,IAAzBjB,EAAcmB,SACdd,GAAa,GACbG,EAAS7B,EAAaqB,EAAc,KACpCQ,EAASxB,EAAagB,EAAc,MAsBFoB,CAAkBR,IAAWS,MAAO,CAACC,OAAQ,MAAOC,QAAS,OADnG,SAC4GX,GAA/FY,kBAGXC,EAAc,CAAC,gBAAiB,oCAAqC,iDAAkD,SAASd,KAAI,SAAAe,GAAQ,OAC9I,wBAAQZ,UAAWnB,EAAQR,YAAcuC,EAAW,SAAW,eACvDX,QAAS,kBAvBK,SAACW,GAAelB,EAAStB,EAAawC,IAuBrCC,CAAkBD,IAAWL,MAAO,CAACC,OAAQ,MAAOC,QAAS,OADpF,SAC6FG,GADTF,kBAIxF,OACI,qCACI,sBAAKV,UAAU,WAAWO,MAAO,CAACO,MAAO,OAAQC,UAAW,SAAUC,WAAY,UAAlF,UACI,wBAAQT,MAAO,CAACC,OAAQ,OAAQP,QAzBlB,WACtBV,GAAa,GACbJ,EAAiB,KAuBmDa,UAAU,gBAAtE,SAAuFV,EAAY,gBAAkB,wBACpHM,KAEL,sBAAKI,UAAU,WAAWO,MAAO,CAACO,MAAO,OAAQC,UAAW,SAAUC,WAAY,UAAlF,UACKL,EACD,wBAAQX,UAAU,eAAeC,QApBzB,WAAQP,EAAShB,GAAW,KAqB5B6B,MAAO,CAACU,YAAa,eAAgBC,gBAAiB,eAAgBV,OAAQ,MAAOC,QAAS,OAAQO,WAAY,OAD1H,4BAGJ,sBAAKhB,UAAU,WAAWO,MAAO,CAACO,MAAO,OAAQC,UAAW,SAAUC,WAAY,UAAlF,UACI,wBAAQhB,UAA4B,QAAjBnB,EAAQN,KAAiB,SAAW,eAAgB0B,QA7B3D,WACpBR,GAAU,GACVC,EAASpB,EAAQ,SA2BwFyB,SAAgC,kBAAtBlB,EAAQR,WAAuD,sCAAtBQ,EAAQR,UACpJkC,MAA6B,kBAAtB1B,EAAQR,WAAuD,sCAAtBQ,EAAQR,UAAoD,CAAC6C,gBAAiB,aAAcD,YAAa,aAAcE,YAAa,OAAQJ,UAAW,SAAUK,QAAS,OAAS,CAACD,YAAa,OAAQJ,UAAW,UAD5Q,uBAEA,uBAAOR,MAAO,CAACc,MAAO,eAAgBC,UAAW,MAAON,WAAY,SAAUD,UAAW,SAAUK,QAAS5B,EAAS,MAAQ,KACtH+B,YAAanC,EAAcoC,KAAK,OAAOC,SAAU,SAACC,GAAQjC,GAAU,GAAQJ,EAAgBqC,EAAEC,OAAOC,UAC5G,wBAAQrB,MAAO,CAACS,WAAY,OAAQD,UAAW,SAAUK,QAAS5B,EAAS,MAAQ,KAAMS,QAxC/E,WAAQP,EAASpB,EAAQc,KAwCnC,gCCrEHyC,EAAa,WACtB,IAAMhD,EAAUC,aAAY,SAAAhB,GAAK,OAAIA,EAAMiB,UAEvC6B,EAAW,GACXkB,EAAW,GAWf,MAV0B,kBAAtBjD,EAAQR,WAAiCuC,EAAW,eAAgBkB,EAAWjD,EAAQN,KAAK,QACjE,sCAAtBM,EAAQR,WAAqDuC,EAAW,QAASkB,EAAWjD,EAAQN,KAAK,0BACnF,mDAAtBM,EAAQR,WAAkEuC,EAAW,WAAYkB,EAAWjD,EAAQN,KAAK,6BACnG,UAAtBM,EAAQR,YAAyBuC,EAAW,QAASkB,EAAWjD,EAAQN,KAAK,sBAEjE,QAAjBM,EAAQN,OACkB,mDAAtBM,EAAQR,UAAkEyD,EAAW,qCAC1D,UAAtBjD,EAAQR,YAAyByD,EAAW,6BAIrD,mCACI,sBAAKC,MAAM,WAAWxB,MAAO,CAACO,MAAO,OAAQC,UAAW,SAAUC,WAAY,UAA9E,UACI,oBAAIT,MAAO,CAACc,MAAO,eAAgBN,UAAW,MAAOI,YAAa,QAAlE,SAA4EtC,EAAQb,YACpF,qBAAKuC,MAAO,CAACO,MAAO,MAAON,OAAQ,OAAQwB,aAAc,QAASC,IAAK,UAAUpD,EAAQb,UAAU,IAAI4C,EAAS,IAAIkB,EAAUI,IAAI,KAClI,qBAAK3B,MAAO,CAACO,MAAO,MAAON,OAAQ,OAAQwB,aAAc,QAASC,IAAK,UAAUpD,EAAQV,UAAU,IAAIyC,EAAS,IAAIkB,EAAUI,IAAI,KAClI,oBAAI3B,MAAO,CAACc,MAAO,eAAgBN,UAAW,MAAOC,WAAY,QAAjE,SAA2EnC,EAAQV,kBCiCpFgE,MAlDf,WAEE,IAAMzC,EAAWC,cACXiB,EAAW9B,aAAY,SAAAhB,GAAK,OAAIA,EAAMiB,OAAOV,aAC7CW,EAAOF,aAAY,SAAAhB,GAAK,OAAIA,EAAMkB,KAAKL,WAEzCyD,EAAc,GA0BlB,OAvBEA,EADe,kBAAbxB,EACY,4OAGM,sCAAbA,EACO,gdAMM,mDAAbA,EACO,+cAMA,yVAOZ,qCACE,sBAAKZ,UAAU,MAAMO,MAAOvB,EAAO,CAACqD,WAAY,uBAAwBC,OAAQ,2CAA6C,CAACD,WAAY,uBAA1I,UACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEArD,GACF,sBAAKuB,MAAO,CAACyB,aAAc,OAAQO,SAAU,WAAYC,IAAK,OAAQC,KAAM,OAC1E3B,MAAO,MAAOI,gBAAiB,OAAQwB,UAAW,UADpD,UAEE,oBAAInC,MAAO,CAACc,MAAO,gBAAnB,SAAqCT,IACrC,mBAAGL,MAAO,CAACC,OAAQ,MAAnB,SAA2B4B,IAC3B,wBAAQnC,QAAS,kBAAMP,EAAShB,GAAW,KAAS6B,MAAO,CAACoC,aAAc,MAA1E,0BC/CGC,EAAQC,YAAe,CAChCC,QAAS,CACL/D,OAAQgE,EACR/D,KAAMgE,KCAdC,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRQ,SAASC,eAAe,U","file":"static/js/main.cc3cd597.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\"cellType1\": \"aCD4\", \"cellType2\": \"naCD4\", \"assetType\": \"Contact Plots\", \"gene\": \"IL7R\"}\n\nconst assetSlice = createSlice({\n    name: 'assets',\n    initialState,\n    reducers: {\n        setCellType1(state, action) { state.cellType1 = action.payload },\n        setCellType2(state, action) { state.cellType2 = action.payload },\n        setAssetType(state, action) { state.assetType = action.payload },\n        setGene(state, action) { state.gene = action.payload }\n    }\n})\n\nexport const { setCellType1, setCellType2, setAssetType, setGene } = assetSlice.actions\n\nexport default assetSlice.reducer","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\"visible\": false}\n\nconst infoSlice = createSlice({\n    name: \"info\",\n    initialState,\n    reducers: {\n        setVisible(state, action) { state.visible = action.payload }\n    }\n})\n\nexport const { setVisible } = infoSlice.actions\n\nexport default infoSlice.reducer","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setCellType1, setCellType2, setAssetType, setGene } from \"./assetSlice\";\nimport { setVisible } from \"../infoModal/infoSlice\";\nimport '../../main.css';\nimport { nanoid } from \"@reduxjs/toolkit\";\n\nexport const AssetChooser = () => {\n    const options = useSelector(state => state.assets)\n    const info = useSelector(state => state.info.visible)\n    const [typesSelected, setTypesSelected] = useState([])\n    const [geneSelected, setGeneSelected] = useState(\"IL7R\")\n    const [selecting, setSelecting] = useState(false)\n    const [dimmed, setDimmed] = useState(false)\n    const dispatch = useDispatch()\n\n    const cellTypes = [\"aCD4\", \"EP\", \"Ery\", \"FoeT\", \"Mac0\", \"Mac1\", \"Mac2\", \"MK\", \"Mon\", \"naCD4\", \"nB\", \"nCD4\", \"nCD8\", \"Neu\", \"tB\", \"tCD8\"]\n\n    const onCellTypeClicked = (cellType) => {\n        if (!typesSelected.includes(cellType)) {\n            const temp = typesSelected\n            temp.push(cellType)\n            setTypesSelected(temp)\n        }\n        if (typesSelected.length === 2) {\n            setSelecting(false)\n            dispatch(setCellType1(typesSelected[0]))\n            dispatch(setCellType2(typesSelected[1]))\n        }\n    }\n\n    const onPlotTypeClicked = (plotType) => { dispatch(setAssetType(plotType)) }\n\n    const onGeneClicked = () => { dispatch(setGene(geneSelected)) }\n\n    const onReselectClicked = () => {\n        setSelecting(true)\n        setTypesSelected([])\n    }\n\n    const allGenesClicked = () => {\n        setDimmed(true)\n        dispatch(setGene(\"all\"))\n    }\n\n    const infoClicked = () => { dispatch(setVisible(true)) }\n\n    const cellButtons = cellTypes.map(cellType => (\n        <button disabled={!selecting} className={(options.cellType1 === cellType || options.cellType2 === cellType) ? \"button\" : \"muted-button\"}\n                key={nanoid()} onClick={() => onCellTypeClicked(cellType)} style={{margin: \"3px\", padding: \"8px\"}}>{cellType}</button>\n    ))\n\n    const plotButtons = [\"Contact Plots\", \"Coefficients (all) & Significance\", \"Coefficients (max per fragment) & Significance\", \"ECDFs\"].map(plotType => (\n        <button className={options.assetType === plotType ? \"button\" : \"muted-button\"} key={nanoid()}\n                onClick={() => onPlotTypeClicked(plotType)} style={{margin: \"3px\", padding: \"8px\"}}>{plotType}</button>\n    ))\n\n    return (\n        <>\n            <div className=\"flex-row\" style={{width: \"100%\", marginTop: \"0.5rem\", marginLeft: \"0.5rem\"}}>\n                <button style={{margin: \"3px\"}} onClick={onReselectClicked} className=\"accent-button\">{selecting ? \"Select two...\" : \"Reselect Cell Types\"}</button>\n                {cellButtons}\n            </div>\n            <div className=\"flex-row\" style={{width: \"100%\", marginTop: \"0.5rem\", marginLeft: \"0.5rem\"}}>\n                {plotButtons}\n                <button className=\"round-button\" onClick={infoClicked}\n                        style={{borderColor: \"mediumpurple\", backgroundColor: \"mediumpurple\", margin: \"3px\", padding: \"12px\", marginLeft: \"6px\"}}>Figure Info</button>\n            </div>\n            <div className=\"flex-row\" style={{width: \"100%\", marginTop: \"0.5rem\", marginLeft: \"0.5rem\"}}>\n                <button className={options.gene === \"all\" ? \"button\" : \"muted-button\"} onClick={allGenesClicked} disabled={options.assetType === \"Contact Plots\" || options.assetType === \"Coefficients (all) & Significance\"}\n                        style={options.assetType === \"Contact Plots\" || options.assetType === \"Coefficients (all) & Significance\" ? {backgroundColor: \"lightcoral\", borderColor: \"lightcoral\", marginRight: \"10px\", marginTop: \"0.2rem\", opacity: \"0.5\"} : {marginRight: \"10px\", marginTop: \"0.2rem\"}}>All Genes</button>\n                <input style={{color: \"antiquewhite\", flexBasis: \"50%\", marginLeft: \"0.2rem\", marginTop: \"0.2rem\", opacity: dimmed ? \"0.5\" : \"1\"}}\n                       placeholder={geneSelected} type=\"text\" onChange={(e) => { setDimmed(false); setGeneSelected(e.target.value) }}/>\n                <button style={{marginLeft: \"10px\", marginTop: \"0.2rem\", opacity: dimmed ? \"0.5\" : \"1\"}} onClick={onGeneClicked}>Choose Gene</button>\n            </div>\n        </>\n    )\n}","import React from 'react';\nimport { useSelector} from 'react-redux';\nimport '../../main.css';\n\nexport const PlotViewer = () => {\n    const options = useSelector(state => state.assets)\n\n    let plotType = \"\"\n    let filename = \"\"\n    if (options.assetType === \"Contact Plots\") { plotType = \"contactPlots\"; filename = options.gene+\".png\" }\n    else if (options.assetType === \"Coefficients (all) & Significance\") { plotType = \"genes\"; filename = options.gene+\"-significanceCoefs.png\" }\n    else if (options.assetType === \"Coefficients (max per fragment) & Significance\") { plotType = \"genesMax\"; filename = options.gene+\"-significanceMaxCoefs.png\" }\n    else if (options.assetType === \"ECDFs\") { plotType = \"ECDFs\"; filename = options.gene+\"_maxCoefs_ecdf.png\" }\n\n    if (options.gene === \"all\") {\n        if (options.assetType === \"Coefficients (max per fragment) & Significance\") { filename = \"_allGenes-significanceMaxCoefs.png\" }\n        else if (options.assetType === \"ECDFs\") { filename = \"master_maxCoefs_ecdf.png\" }\n    }\n\n    return (\n        <>\n            <div class=\"flex-row\" style={{width: \"100%\", marginTop: \"0.5rem\", marginLeft: \"0.5rem\"}}>\n                <h2 style={{color: \"antiquewhite\", marginTop: \"19%\", marginRight: \"10px\"}}>{options.cellType1}</h2>\n                <img style={{width: \"38%\", margin: \"10px\", borderRadius: \"10px\"}} src={\"images/\"+options.cellType1+\"/\"+plotType+\"/\"+filename} alt=\"\" />\n                <img style={{width: \"38%\", margin: \"10px\", borderRadius: \"10px\"}} src={\"images/\"+options.cellType2+\"/\"+plotType+\"/\"+filename} alt=\"\" />\n                <h2 style={{color: \"antiquewhite\", marginTop: \"19%\", marginLeft: \"10px\"}}>{options.cellType2}</h2>\n            </div>\n        </>\n    )\n}\n","import './App.css';\nimport './main.css';\nimport { AssetChooser } from './features/assetChooser/AssetChooser';\nimport { PlotViewer } from './features/plotViewer/PlotViewer'\nimport React from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setVisible } from \"./features/infoModal/infoSlice\";\n\nfunction App() {\n\n  const dispatch = useDispatch()\n  const plotType = useSelector(state => state.assets.assetType)\n  const info = useSelector(state => state.info.visible)\n\n  let explanation = \"\"\n\n  if (plotType === \"Contact Plots\") {\n    explanation = \"These plots depict the raw counts of PC-HiC observed interactions vs genomic distance from the bait locus. \" +\n        \"The p-values corresponding to the determined significance of each interaction are also plotted in red on a negative log scale.\"\n  }\n  else if (plotType === \"Coefficients (all) & Significance\") {\n    explanation = \"These plots show the relationship between regression coefficients and Hi-C identified features of interest. \" +\n        \"Coefficients corresponding to each tile in the regression model were tagged with 'significance' based \" +\n        \"on the PC-HiC restriction fragment in which they were contained; if the fragment was part of a significant \" +\n        \"interaction, the coefficient was labeled 'significant', and vice versa. The histogram of coefficient values \" +\n        \"was then split based on this factor.\"\n  }\n  else if (plotType === \"Coefficients (max per fragment) & Significance\") {\n    explanation = \"These plots show the relationship between regression coefficients and Hi-C identified features of interest. \" +\n        \"The values of the maximum coefficient from the tiles contained in each PC-HiC restriction fragment pertaining to the selected \" +\n        \"gene (or all genes, if chosen) were plotted in these graphs. If a restriction fragment participated in a significant \" +\n        \"interaction, its max coefficient is labeled 'significant'; the distributions are separated out based on this.\"\n  }\n  else {\n    explanation = \"These plots graph the empirical cumulative distribution function of the coefficients pertaining to tiles \" +\n        \"within the locus of the selected gene, or all genes combined if selected. Separated by significance in \" +\n        \"a similar manner to the histogram plots, with different ECDFs plotted in green and red for significant \" +\n        \"and insignificant respectively.\"\n  }\n\n  return (\n      <>\n        <div className=\"App\" style={info ? {transition: \"filter 0.3s ease-out\", filter: \"blur(10px) opacity(50%) brightness(50%)\"} : {transition: \"filter 0.3s ease-in\"}}>\n          <AssetChooser />\n          <PlotViewer />\n        </div>\n        { info &&\n        <div style={{borderRadius: \"15px\", position: \"absolute\", top: \"25vh\", left: \"25vw\",\n          width: \"50%\", backgroundColor: \"gray\", textAlign: \"center\"}}>\n          <h3 style={{color: \"antiquewhite\"}}>{plotType}</h3>\n          <p style={{margin: \"3%\"}}>{explanation}</p>\n          <button onClick={() => dispatch(setVisible(false))} style={{marginBottom: \"3%\"}}>Close</button>\n        </div>\n        }\n      </>\n  );\n}\n\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\nimport assetReducer from '../features/assetChooser/assetSlice';\nimport infoReducer from '../features/infoModal/infoSlice';\n\nexport const store = configureStore({\n    reducer: {\n        assets: assetReducer,\n        info: infoReducer\n    },\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}