{"version":3,"sources":["features/assetChooser/assetSlice.js","features/infoModal/infoSlice.js","features/assetChooser/AssetChooser.js","features/plotViewer/PlotViewer.js","App.js","app/store.js","index.js"],"names":["assetSlice","createSlice","name","initialState","reducers","setCellType1","state","action","cellType1","payload","setCellType2","cellType2","setAssetType","assetType","setGene","gene","actions","infoSlice","setVisible","visible","AssetChooser","options","useSelector","assets","useState","typesSelected","setTypesSelected","geneSelected","setGeneSelected","selecting","setSelecting","dimmed","setDimmed","dispatch","useDispatch","allowedGenes","cellButtons","map","cellType","disabled","className","onClick","includes","temp","push","length","onCellTypeClicked","style","margin","padding","nanoid","plotButtons","plotType","onPlotTypeClicked","width","marginTop","marginLeft","borderColor","backgroundColor","marginRight","opacity","color","flexBasis","placeholder","type","onChange","e","target","value","PlotViewer","geneTableRows","i","row","slice","geneName","fontSize","textAlign","filename","height","borderRadius","src","process","alt","display","flexDirection","justifyContent","App","info","explanation","transition","filter","position","top","left","marginBottom","store","configureStore","reducer","assetReducer","infoReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0ee2d2b.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\"cellType1\": \"aCD4\", \"cellType2\": \"naCD4\", \"assetType\": \"Contact Plots\", \"gene\": \"IL7R\"}\n\nconst assetSlice = createSlice({\n    name: 'assets',\n    initialState,\n    reducers: {\n        setCellType1(state, action) { state.cellType1 = action.payload },\n        setCellType2(state, action) { state.cellType2 = action.payload },\n        setAssetType(state, action) { state.assetType = action.payload },\n        setGene(state, action) { state.gene = action.payload }\n    }\n})\n\nexport const { setCellType1, setCellType2, setAssetType, setGene } = assetSlice.actions\n\nexport default assetSlice.reducer","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\"visible\": false}\n\nconst infoSlice = createSlice({\n    name: \"info\",\n    initialState,\n    reducers: {\n        setVisible(state, action) { state.visible = action.payload }\n    }\n})\n\nexport const { setVisible } = infoSlice.actions\n\nexport default infoSlice.reducer","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setCellType1, setCellType2, setAssetType, setGene } from \"./assetSlice\";\nimport { setVisible } from \"../infoModal/infoSlice\";\nimport '../../main.css';\nimport { nanoid } from \"@reduxjs/toolkit\";\n\nexport const AssetChooser = () => {\n    const options = useSelector(state => state.assets)\n    const [typesSelected, setTypesSelected] = useState([])\n    const [geneSelected, setGeneSelected] = useState(\"IL7R\")\n    const [selecting, setSelecting] = useState(false)\n    const [dimmed, setDimmed] = useState(false)\n    const dispatch = useDispatch()\n\n    const allowedGenes = [\"AIF1\", \"ANK3\", \"AOAH\", \"ATG7\", \"ATP2B1\", \"BACH1\",\n        \"CD7\", \"CD74\", \"CLEC12A\", \"CTSS\", \"DLEU2\",  \"DUSP6\", \"EVI5\", \"FGL2\",\n        \"FOSB\", \"GPCPD1\", \"GSAP\", \"HLA-DMA\", \"HLA-DMB\", \"HLA-DQB1\", \"HLA-DRB1\",\n        \"IL7R\", \"JAZF1\", \"JUN\", \"LEF1\", \"LTB\", \"LYST\", \"MARCH1\", \"MEGF9\", \"MTSS1\",\n        \"MXD1\", \"MYADM\", \"NEAT1\",  \"NUMB\", \"PARP14\", \"POU2F2\", \"PRKCH\", \"PSTPIP2\",\n        \"QKI\", \"RGS2\", \"RPL11\", \"RPL13A\", \"RPS18\", \"SAT1\", \"SCLT1\", \"PSAP\",\n        \"SIPA1L1\", \"SKAP1\", \"SLFN12L\", \"SRGN\", \"TBXAS1\", \"TET3\"]\n\n    const cellTypes = [\"aCD4\", \"EP\", \"Ery\", \"FoeT\", \"Mac0\", \"Mac1\", \"Mac2\", \"MK\", \"Mon\", \"naCD4\", \"nB\", \"nCD4\", \"nCD8\", \"Neu\", \"tB\", \"tCD8\"]\n\n    const onCellTypeClicked = (cellType) => {\n        if (!typesSelected.includes(cellType)) {\n            const temp = typesSelected\n            temp.push(cellType)\n            setTypesSelected(temp)\n        }\n        if (typesSelected.length === 2) {\n            setSelecting(false)\n            dispatch(setCellType1(typesSelected[0]))\n            dispatch(setCellType2(typesSelected[1]))\n        }\n    }\n\n    const onPlotTypeClicked = (plotType) => {\n        if (options.gene === \"all\" && (plotType === \"Coefficients (all) & Significance\" || plotType === \"Contact Plots\")) { dispatch(setGene(\"ERROR2\")) }\n        dispatch(setAssetType(plotType))\n    }\n\n    const onGeneClicked = () => {\n        if (allowedGenes.includes(geneSelected)) { dispatch(setGene(geneSelected)) }\n        else { dispatch(setGene(\"ERROR\")) }\n    }\n\n    const onReselectClicked = () => {\n        setSelecting(true)\n        setTypesSelected([])\n    }\n\n    const allGenesClicked = () => {\n        setDimmed(true)\n        dispatch(setGene(\"all\"))\n    }\n\n    const infoClicked = () => { dispatch(setVisible(true)) }\n\n    const cellButtons = cellTypes.map(cellType => (\n        <button disabled={!selecting} className={(options.cellType1 === cellType || options.cellType2 === cellType) ? \"button\" : \"muted-button\"}\n                key={nanoid()} onClick={() => onCellTypeClicked(cellType)} style={{margin: \"3px\", padding: \"8px\"}}>{cellType}</button>\n    ))\n\n    const plotButtons = [\"Contact Plots\", \"Coefficients (all) & Significance\", \"Coefficients (max per fragment) & Significance\", \"ECDFs\"].map(plotType => (\n        <button className={options.assetType === plotType ? \"button\" : \"muted-button\"} key={nanoid()}\n                onClick={() => onPlotTypeClicked(plotType)} style={{margin: \"3px\", padding: \"8px\"}}>{plotType}</button>\n    ))\n\n    return (\n        <>\n            <div className=\"flex-row\" style={{width: \"100%\", marginTop: \"0.5rem\", marginLeft: \"0.5rem\"}}>\n                <button style={{margin: \"3px\"}} onClick={onReselectClicked} className=\"accent-button\">{selecting ? \"Select two...\" : \"Reselect Cell Types\"}</button>\n                {cellButtons}\n            </div>\n            <div className=\"flex-row\" style={{width: \"100%\", marginTop: \"0.5rem\", marginLeft: \"0.5rem\"}}>\n                {plotButtons}\n                <button className=\"round-button\" onClick={infoClicked}\n                        style={{borderColor: \"mediumpurple\", backgroundColor: \"mediumpurple\", margin: \"3px\", padding: \"12px\", marginLeft: \"6px\"}}>Figure Info</button>\n            </div>\n            <div className=\"flex-row\" style={{width: \"100%\", marginTop: \"0.5rem\", marginLeft: \"0.5rem\"}}>\n                <button className={options.gene === \"all\" ? \"button\" : \"muted-button\"} onClick={allGenesClicked} disabled={options.assetType === \"Contact Plots\" || options.assetType === \"Coefficients (all) & Significance\"}\n                        style={options.assetType === \"Contact Plots\" || options.assetType === \"Coefficients (all) & Significance\" ? {backgroundColor: \"lightcoral\", borderColor: \"lightcoral\", marginRight: \"10px\", marginTop: \"0.2rem\", opacity: \"0.5\"} : {marginRight: \"10px\", marginTop: \"0.2rem\"}}>All Genes</button>\n                <input style={{color: \"antiquewhite\", flexBasis: \"50%\", marginLeft: \"0.2rem\", marginTop: \"0.2rem\", opacity: dimmed ? \"0.5\" : \"1\"}}\n                       placeholder={geneSelected} type=\"text\" onChange={(e) => { setDimmed(false); setGeneSelected(e.target.value) }}/>\n                <button style={{marginLeft: \"10px\", marginTop: \"0.2rem\", opacity: dimmed ? \"0.5\" : \"1\"}} onClick={onGeneClicked}>Choose Gene</button>\n            </div>\n        </>\n    )\n}","import React from 'react';\nimport { useSelector} from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport '../../main.css';\n\nexport const PlotViewer = () => {\n    const options = useSelector(state => state.assets)\n\n    const allowedGenes = [\"AIF1\", \"ANK3\", \"AOAH\", \"ATG7\", \"ATP2B1\", \"BACH1\",\n        \"CD7\", \"CD74\", \"CLEC12A\", \"CTSS\", \"DLEU2\",  \"DUSP6\", \"EVI5\", \"FGL2\",\n        \"FOSB\", \"GPCPD1\", \"GSAP\", \"HLA-DMA\", \"HLA-DMB\", \"HLA-DQB1\", \"HLA-DRB1\",\n        \"IL7R\", \"JAZF1\", \"JUN\", \"LEF1\", \"LTB\", \"LYST\", \"MARCH1\", \"MEGF9\", \"MTSS1\",\n        \"MXD1\", \"MYADM\", \"NEAT1\",  \"NUMB\", \"PARP14\", \"POU2F2\", \"PRKCH\", \"PSTPIP2\",\n        \"QKI\", \"RGS2\", \"RPL11\", \"RPL13A\", \"RPS18\", \"SAT1\", \"SCLT1\", \"PSAP\",\n        \"SIPA1L1\", \"SKAP1\", \"SLFN12L\", \"SRGN\", \"TBXAS1\", \"TET3\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n\n    const geneTableRows = []\n\n    for (let i = 0; i < 51; i += 10) {\n        const row = <tr>\n            {allowedGenes.slice(i, i+10).map(geneName => {\n                return (<td key={nanoid()} style={{fontSize: \"1.3rem\", textAlign: \"center\"}}>{geneName}</td>)\n            })}\n        </tr>\n        geneTableRows.push(row)\n    }\n\n    let plotType = \"\"\n    let filename = \"\"\n    if (options.assetType === \"Contact Plots\") { plotType = \"contactPlots\"; filename = options.gene+\".png\" }\n    else if (options.assetType === \"Coefficients (all) & Significance\") { plotType = \"genes\"; filename = options.gene+\"-significanceCoefs.png\" }\n    else if (options.assetType === \"Coefficients (max per fragment) & Significance\") { plotType = \"genesMax\"; filename = options.gene+\"-significanceMaxCoefs.png\" }\n    else if (options.assetType === \"ECDFs\") { plotType = \"ECDFs\"; filename = options.gene+\"_maxCoefs_ecdf.png\" }\n\n    if (options.gene === \"all\") {\n        if (options.assetType === \"Coefficients (max per fragment) & Significance\") { filename = \"allGenes-significanceMaxCoefs.png\" }\n        else if (options.assetType === \"ECDFs\") { filename = \"master_maxCoefs_ecdf.png\" }\n    }\n\n    return (\n        <>\n            { options.gene === \"ERROR2\" && <h3 style={{color: \"antiquewhite\"}}>This plot type does not have an \"all genes\" option. Choose an individual gene to view its plots.</h3> }\n            { (options.gene !== \"ERROR\" && options.gene !== \"ERROR2\") &&\n                <div className=\"flex-row\" style={{width: \"100%\", marginTop: \"0.5rem\", marginLeft: \"0.5rem\"}}>\n                    <h2 style={{\n                        color: \"antiquewhite\",\n                        marginTop: \"19%\",\n                        marginRight: \"10px\"\n                    }}>{options.cellType1}</h2>\n                    <img style={{width: \"38%\", height: \"38%\", margin: \"10px\", borderRadius: \"10px\"}}\n                         src={process.env.PUBLIC_URL + \"/images/\" + options.cellType1 + \"/\" + plotType + \"/\" + filename}\n                         alt=\"\"/>\n                    <img style={{width: \"38%\", height: \"38%\", margin: \"10px\", borderRadius: \"10px\"}}\n                         src={process.env.PUBLIC_URL + \"/images/\" + options.cellType2 + \"/\" + plotType + \"/\" + filename}\n                         alt=\"\"/>\n                    <h2 style={{\n                        color: \"antiquewhite\",\n                        marginTop: \"19%\",\n                        marginLeft: \"10px\"\n                    }}>{options.cellType2}</h2>\n                </div>\n            }\n            { (options.gene === \"ERROR\" && options.gene !== \"ERROR2\") &&\n                <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"center\"}}>\n                    <h3 style={{color: \"antiquewhite\"}}>That gene isn't available — perhaps it was mistyped?</h3>\n                    <h5 style={{color: \"antiquewhite\"}}>Available Genes</h5>\n                    <table style={{width: \"94%\", marginLeft: \"3%\", marginRight: \"3%\"}}>\n                        <thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead>\n                        <tbody>{geneTableRows}</tbody>\n                        <tfoot><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></tfoot>\n                    </table>\n                </div>\n            }\n        </>\n    )\n}\n","import './App.css';\nimport './main.css';\nimport { AssetChooser } from './features/assetChooser/AssetChooser';\nimport { PlotViewer } from './features/plotViewer/PlotViewer'\nimport React from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setVisible } from \"./features/infoModal/infoSlice\";\n\nfunction App() {\n\n  const dispatch = useDispatch()\n  const plotType = useSelector(state => state.assets.assetType)\n  const info = useSelector(state => state.info.visible)\n\n  let explanation = \"\"\n\n  if (plotType === \"Contact Plots\") {\n    explanation = \"These plots depict the raw counts of PC-HiC observed interactions vs genomic distance from the bait locus. \" +\n        \"The p-values corresponding to the determined significance of each interaction are also plotted in red on a negative log scale.\"\n  }\n  else if (plotType === \"Coefficients (all) & Significance\") {\n    explanation = \"These plots show the relationship between regression coefficients and Hi-C identified features of interest. \" +\n        \"Coefficients corresponding to each tile in the regression model were tagged with 'significance' based \" +\n        \"on the PC-HiC restriction fragment in which they were contained; if the fragment was part of a significant \" +\n        \"interaction, the coefficient was labeled 'significant', and vice versa. The histogram of coefficient values \" +\n        \"was then split based on this factor.\"\n  }\n  else if (plotType === \"Coefficients (max per fragment) & Significance\") {\n    explanation = \"These plots show the relationship between regression coefficients and Hi-C identified features of interest. \" +\n        \"The values of the maximum coefficient from the tiles contained in each PC-HiC restriction fragment pertaining to the selected \" +\n        \"gene (or all genes, if chosen) were plotted in these graphs. If a restriction fragment participated in a significant \" +\n        \"interaction, its max coefficient is labeled 'significant'; the distributions are separated out based on this.\"\n  }\n  else {\n    explanation = \"These plots graph the empirical cumulative distribution function of the coefficients pertaining to tiles \" +\n        \"within the locus of the selected gene, or all genes combined if selected. Separated by significance in \" +\n        \"a similar manner to the histogram plots, with different ECDFs plotted in green and red for significant \" +\n        \"and insignificant respectively.\"\n  }\n\n  return (\n      <>\n        <div className=\"App\" style={info ? {transition: \"filter 0.3s ease-out\", filter: \"blur(10px) opacity(50%) brightness(50%)\"} : {transition: \"filter 0.3s ease-in\"}}>\n          <AssetChooser />\n          <PlotViewer />\n        </div>\n        { info &&\n        <div style={{borderRadius: \"15px\", position: \"absolute\", top: \"25vh\", left: \"25vw\",\n          width: \"50%\", backgroundColor: \"gray\", textAlign: \"center\"}}>\n          <h3 style={{color: \"antiquewhite\"}}>{plotType}</h3>\n          <p style={{margin: \"3%\"}}>{explanation}</p>\n          <button onClick={() => dispatch(setVisible(false))} style={{marginBottom: \"3%\"}}>Close</button>\n        </div>\n        }\n      </>\n  );\n}\n\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\nimport assetReducer from '../features/assetChooser/assetSlice';\nimport infoReducer from '../features/infoModal/infoSlice';\n\nexport const store = configureStore({\n    reducer: {\n        assets: assetReducer,\n        info: infoReducer\n    },\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}