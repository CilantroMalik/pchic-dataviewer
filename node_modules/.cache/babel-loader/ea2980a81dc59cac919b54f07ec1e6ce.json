{"ast":null,"code":"var _jsxFileName = \"/Volumes/YEP/MSKCC-Internship/WebApp-Production/pchic-dataviewer/src/features/assetChooser/AssetChooser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setCellType1, setCellType2, setAssetType, setGene } from \"./assetSlice\";\nimport { setVisible } from \"../infoModal/infoSlice\";\nimport '../../main.css';\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AssetChooser = () => {\n  _s();\n\n  const options = useSelector(state => state.assets);\n  const [typesSelected, setTypesSelected] = useState([]);\n  const [geneSelected, setGeneSelected] = useState(\"IL7R\");\n  const [selecting, setSelecting] = useState(false);\n  const [dimmed, setDimmed] = useState(false);\n  const dispatch = useDispatch();\n  const allowedGenes = [\"AIF1\", \"ANK3\", \"AOAH\", \"ATG7\", \"ATP2B1\", \"BACH1\", \"CD7\", \"CD74\", \"CLEC12A\", \"CTSS\", \"DLEU2\", \"DUSP6\", \"EVI5\", \"FGL2\", \"FOSB\", \"GPCPD1\", \"GSAP\", \"HLA-DMA\", \"HLA-DMB\", \"HLA-DQB1\", \"HLA-DRB1\", \"IL7R\", \"JAZF1\", \"JUN\", \"LEF1\", \"LTB\", \"LYST\", \"MARCH1\", \"MEGF9\", \"MTSS1\", \"MXD1\", \"MYADM\", \"NEAT1\", \"NUMB\", \"PARP14\", \"POU2F2\", \"PRKCH\", \"PSTPIP2\", \"QKI\", \"RGS2\", \"RPL11\", \"RPL13A\", \"RPS18\", \"SAT1\", \"SCLT1\", \"PSAP\", \"SIPA1L1\", \"SKAP1\", \"SLFN12L\", \"SRGN\", \"TBXAS1\", \"TET3\"];\n  const cellTypes = [\"aCD4\", \"EP\", \"Ery\", \"FoeT\", \"Mac0\", \"Mac1\", \"Mac2\", \"MK\", \"Mon\", \"naCD4\", \"nB\", \"nCD4\", \"nCD8\", \"Neu\", \"tB\", \"tCD8\"];\n\n  const onCellTypeClicked = cellType => {\n    if (!typesSelected.includes(cellType)) {\n      const temp = typesSelected;\n      temp.push(cellType);\n      setTypesSelected(temp);\n    }\n\n    if (typesSelected.length === 2) {\n      setSelecting(false);\n      dispatch(setCellType1(typesSelected[0]));\n      dispatch(setCellType2(typesSelected[1]));\n    }\n  };\n\n  const onPlotTypeClicked = plotType => {\n    dispatch(setAssetType(plotType));\n  };\n\n  const onGeneClicked = () => {\n    if (allowedGenes.includes(geneSelected)) {\n      dispatch(setGene(geneSelected));\n    } else {\n      dispatch(setGene(\"ERROR\"));\n    }\n  };\n\n  const onReselectClicked = () => {\n    setSelecting(true);\n    setTypesSelected([]);\n  };\n\n  const allGenesClicked = () => {\n    setDimmed(true);\n    dispatch(setGene(\"all\"));\n  };\n\n  const infoClicked = () => {\n    dispatch(setVisible(true));\n  };\n\n  const cellButtons = cellTypes.map(cellType => /*#__PURE__*/_jsxDEV(\"button\", {\n    disabled: !selecting,\n    className: options.cellType1 === cellType || options.cellType2 === cellType ? \"button\" : \"muted-button\",\n    onClick: () => onCellTypeClicked(cellType),\n    style: {\n      margin: \"3px\",\n      padding: \"8px\"\n    },\n    children: cellType\n  }, nanoid(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this));\n  const plotButtons = [\"Contact Plots\", \"Coefficients (all) & Significance\", \"Coefficients (max per fragment) & Significance\", \"ECDFs\"].map(plotType => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: options.assetType === plotType ? \"button\" : \"muted-button\",\n    onClick: () => onPlotTypeClicked(plotType),\n    style: {\n      margin: \"3px\",\n      padding: \"8px\"\n    },\n    children: plotType\n  }, nanoid(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-row\",\n      style: {\n        width: \"100%\",\n        marginTop: \"0.5rem\",\n        marginLeft: \"0.5rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          margin: \"3px\"\n        },\n        onClick: onReselectClicked,\n        className: \"accent-button\",\n        children: selecting ? \"Select two...\" : \"Reselect Cell Types\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), cellButtons]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-row\",\n      style: {\n        width: \"100%\",\n        marginTop: \"0.5rem\",\n        marginLeft: \"0.5rem\"\n      },\n      children: [plotButtons, /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"round-button\",\n        onClick: infoClicked,\n        style: {\n          borderColor: \"mediumpurple\",\n          backgroundColor: \"mediumpurple\",\n          margin: \"3px\",\n          padding: \"12px\",\n          marginLeft: \"6px\"\n        },\n        children: \"Figure Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-row\",\n      style: {\n        width: \"100%\",\n        marginTop: \"0.5rem\",\n        marginLeft: \"0.5rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: options.gene === \"all\" ? \"button\" : \"muted-button\",\n        onClick: allGenesClicked,\n        disabled: options.assetType === \"Contact Plots\" || options.assetType === \"Coefficients (all) & Significance\",\n        style: options.assetType === \"Contact Plots\" || options.assetType === \"Coefficients (all) & Significance\" ? {\n          backgroundColor: \"lightcoral\",\n          borderColor: \"lightcoral\",\n          marginRight: \"10px\",\n          marginTop: \"0.2rem\",\n          opacity: \"0.5\"\n        } : {\n          marginRight: \"10px\",\n          marginTop: \"0.2rem\"\n        },\n        children: \"All Genes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        style: {\n          color: \"antiquewhite\",\n          flexBasis: \"50%\",\n          marginLeft: \"0.2rem\",\n          marginTop: \"0.2rem\",\n          opacity: dimmed ? \"0.5\" : \"1\"\n        },\n        placeholder: geneSelected,\n        type: \"text\",\n        onChange: e => {\n          setDimmed(false);\n          setGeneSelected(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          marginLeft: \"10px\",\n          marginTop: \"0.2rem\",\n          opacity: dimmed ? \"0.5\" : \"1\"\n        },\n        onClick: onGeneClicked,\n        children: \"Choose Gene\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AssetChooser, \"+wEHgFJ5CCsDgphto4uEU5aY//s=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = AssetChooser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AssetChooser\");","map":{"version":3,"sources":["/Volumes/YEP/MSKCC-Internship/WebApp-Production/pchic-dataviewer/src/features/assetChooser/AssetChooser.js"],"names":["React","useState","useSelector","useDispatch","setCellType1","setCellType2","setAssetType","setGene","setVisible","nanoid","AssetChooser","options","state","assets","typesSelected","setTypesSelected","geneSelected","setGeneSelected","selecting","setSelecting","dimmed","setDimmed","dispatch","allowedGenes","cellTypes","onCellTypeClicked","cellType","includes","temp","push","length","onPlotTypeClicked","plotType","onGeneClicked","onReselectClicked","allGenesClicked","infoClicked","cellButtons","map","cellType1","cellType2","margin","padding","plotButtons","assetType","width","marginTop","marginLeft","borderColor","backgroundColor","gene","marginRight","opacity","color","flexBasis","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setCellType1, setCellType2, setAssetType, setGene } from \"./assetSlice\";\nimport { setVisible } from \"../infoModal/infoSlice\";\nimport '../../main.css';\nimport { nanoid } from \"@reduxjs/toolkit\";\n\nexport const AssetChooser = () => {\n    const options = useSelector(state => state.assets)\n    const [typesSelected, setTypesSelected] = useState([])\n    const [geneSelected, setGeneSelected] = useState(\"IL7R\")\n    const [selecting, setSelecting] = useState(false)\n    const [dimmed, setDimmed] = useState(false)\n    const dispatch = useDispatch()\n\n    const allowedGenes = [\"AIF1\", \"ANK3\", \"AOAH\", \"ATG7\", \"ATP2B1\", \"BACH1\",\n        \"CD7\", \"CD74\", \"CLEC12A\", \"CTSS\", \"DLEU2\",  \"DUSP6\", \"EVI5\", \"FGL2\",\n        \"FOSB\", \"GPCPD1\", \"GSAP\", \"HLA-DMA\", \"HLA-DMB\", \"HLA-DQB1\", \"HLA-DRB1\",\n        \"IL7R\", \"JAZF1\", \"JUN\", \"LEF1\", \"LTB\", \"LYST\", \"MARCH1\", \"MEGF9\", \"MTSS1\",\n        \"MXD1\", \"MYADM\", \"NEAT1\",  \"NUMB\", \"PARP14\", \"POU2F2\", \"PRKCH\", \"PSTPIP2\",\n        \"QKI\", \"RGS2\", \"RPL11\", \"RPL13A\", \"RPS18\", \"SAT1\", \"SCLT1\", \"PSAP\",\n        \"SIPA1L1\", \"SKAP1\", \"SLFN12L\", \"SRGN\", \"TBXAS1\", \"TET3\"]\n\n    const cellTypes = [\"aCD4\", \"EP\", \"Ery\", \"FoeT\", \"Mac0\", \"Mac1\", \"Mac2\", \"MK\", \"Mon\", \"naCD4\", \"nB\", \"nCD4\", \"nCD8\", \"Neu\", \"tB\", \"tCD8\"]\n\n    const onCellTypeClicked = (cellType) => {\n        if (!typesSelected.includes(cellType)) {\n            const temp = typesSelected\n            temp.push(cellType)\n            setTypesSelected(temp)\n        }\n        if (typesSelected.length === 2) {\n            setSelecting(false)\n            dispatch(setCellType1(typesSelected[0]))\n            dispatch(setCellType2(typesSelected[1]))\n        }\n    }\n\n    const onPlotTypeClicked = (plotType) => { dispatch(setAssetType(plotType)) }\n\n    const onGeneClicked = () => {\n        if (allowedGenes.includes(geneSelected)) { dispatch(setGene(geneSelected)) }\n        else { dispatch(setGene(\"ERROR\")) }\n    }\n\n    const onReselectClicked = () => {\n        setSelecting(true)\n        setTypesSelected([])\n    }\n\n    const allGenesClicked = () => {\n        setDimmed(true)\n        dispatch(setGene(\"all\"))\n    }\n\n    const infoClicked = () => { dispatch(setVisible(true)) }\n\n    const cellButtons = cellTypes.map(cellType => (\n        <button disabled={!selecting} className={(options.cellType1 === cellType || options.cellType2 === cellType) ? \"button\" : \"muted-button\"}\n                key={nanoid()} onClick={() => onCellTypeClicked(cellType)} style={{margin: \"3px\", padding: \"8px\"}}>{cellType}</button>\n    ))\n\n    const plotButtons = [\"Contact Plots\", \"Coefficients (all) & Significance\", \"Coefficients (max per fragment) & Significance\", \"ECDFs\"].map(plotType => (\n        <button className={options.assetType === plotType ? \"button\" : \"muted-button\"} key={nanoid()}\n                onClick={() => onPlotTypeClicked(plotType)} style={{margin: \"3px\", padding: \"8px\"}}>{plotType}</button>\n    ))\n\n    return (\n        <>\n            <div className=\"flex-row\" style={{width: \"100%\", marginTop: \"0.5rem\", marginLeft: \"0.5rem\"}}>\n                <button style={{margin: \"3px\"}} onClick={onReselectClicked} className=\"accent-button\">{selecting ? \"Select two...\" : \"Reselect Cell Types\"}</button>\n                {cellButtons}\n            </div>\n            <div className=\"flex-row\" style={{width: \"100%\", marginTop: \"0.5rem\", marginLeft: \"0.5rem\"}}>\n                {plotButtons}\n                <button className=\"round-button\" onClick={infoClicked}\n                        style={{borderColor: \"mediumpurple\", backgroundColor: \"mediumpurple\", margin: \"3px\", padding: \"12px\", marginLeft: \"6px\"}}>Figure Info</button>\n            </div>\n            <div className=\"flex-row\" style={{width: \"100%\", marginTop: \"0.5rem\", marginLeft: \"0.5rem\"}}>\n                <button className={options.gene === \"all\" ? \"button\" : \"muted-button\"} onClick={allGenesClicked} disabled={options.assetType === \"Contact Plots\" || options.assetType === \"Coefficients (all) & Significance\"}\n                        style={options.assetType === \"Contact Plots\" || options.assetType === \"Coefficients (all) & Significance\" ? {backgroundColor: \"lightcoral\", borderColor: \"lightcoral\", marginRight: \"10px\", marginTop: \"0.2rem\", opacity: \"0.5\"} : {marginRight: \"10px\", marginTop: \"0.2rem\"}}>All Genes</button>\n                <input style={{color: \"antiquewhite\", flexBasis: \"50%\", marginLeft: \"0.2rem\", marginTop: \"0.2rem\", opacity: dimmed ? \"0.5\" : \"1\"}}\n                       placeholder={geneSelected} type=\"text\" onChange={(e) => { setDimmed(false); setGeneSelected(e.target.value) }}/>\n                <button style={{marginLeft: \"10px\", marginTop: \"0.2rem\", opacity: dimmed ? \"0.5\" : \"1\"}} onClick={onGeneClicked}>Choose Gene</button>\n            </div>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}